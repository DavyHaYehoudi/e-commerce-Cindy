openapi: 3.0.3
info:
  title: Site e-commerce
  description: >
    Some useful links:

    - [Lien Github du code
    source](https://github.com/DavyHaYehoudi/e-commerce-Cindy)

    - [The source API definition for the Pet
    Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  contact:
    email: davy.programa@gmail.com
  version: 1.0.0
servers:
  - url: https://ateliernoralya.com
tags:
  - name: auth
    description: Authentication
  - name: client
    description: Customers
  - name: order
    description: Customer orders
  - name: orderProducts
    description: Products for each order
  - name: product
    description: Products on sale
  - name: credit
    description: Customer credits
  - name: material
    description: Product materials
  - name: promocode
    description : Promotional codes
  - name: giftcard
    description: Gift cards
  - name: statistic
    description: Statistics
  - name: collection
    description: Product collections
  - name: category
    description: Product categories
  - name: tag
    description: Product tags
paths:
  /clients:
    get:
      tags:
        - client
      summary: Get all customers
      description: This route retrieves a list of all the customers registered in the system. Information about each customer, such as their name, address, e-mail address, etc., can be included in the response.Route reserved for administrators
      operationId: getAllClients
      parameters:
        - name: itemsPerPage
          in: query
          description: Number of items per page
          required: true
          schema:
            type: integer
            default: "5"
        - name: steps
          in: query
          description: Number of steps
          required: false
          schema:
            type: string
            default: ""
            example: 0,3,5
        - name: trackingNumber
          in: query
          description: trackingNumber in order 
          required: false
          schema:
            type: string
            default: ""
            example: true
        - name: note
          in: query
          description: note in client 
          required: false
          schema:
            type: string
            default: ""
            example: true
        - name: credit
          in: query
          description: credit in orderProducts 
          required: false
          schema:
            type: string
            default: ""
            example: true
        - name: exchange
          in: query
          description: exchange in orderProducts 
          required: false
          schema:
            type: string
            default: ""
            example: true
        - name: refund
          in: query
          description: refund in orderProducts 
          required: false
          schema:
            type: string
            default: ""
            example: true
        - name: preciseDate
          in: query
          description: precise creation date of order 
          required: false
          schema:
            type: string
            default: ""
            example: 2024-03-10 in this format
        - name: rangeDateStart
          in: query
          description: start of range creation date of order 
          required: false
          schema:
            type: string
            default: ""
            example: 2024-03-10 in this format
        - name: rangeDateEnd
          in: query
          description: end of range creation date of order 
          required: false
          schema:
            type: string
            default: ""
            example: 2024-05-20 in this format
      responses:
        '200':
          description: successful getting all clients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Clients'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - jwt_auth: []
  /clients/{clientId}:
    get:
      tags:
        - client
      summary: Obtain a customer by ID
      description: This route retrieves detailed information about a specific client based on its unique identifier (clientId). Customer details such as name, address, email etc. are returned in the response.
      operationId: getCustomerInfos
      parameters:
        - name: clientId
          in: path
          description: The id that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful getting client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientDetails'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The user does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L'utilisateur n'existe pas.
      security:
        - api_key: []
    patch:
      tags:
        - client
      summary: Update a client
      description: This route is used to update information for a specific client identified by its unique identifier (clientId). The fields to be updated, such as name, address, email, etc., are provided in the body of the PATCH request.
      operationId: updateClient
      parameters:
        - name: clientId
          in: path
          description: id that needs to be edited
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditClient'
      responses:
        '200':
          description: Successful updated client
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L'utilisateur n'existe pas.
      security:
        - api_key: []
  /clients/{clientId}/notesAdmin:
    patch:
      tags:
        - client
      summary: Update admin notes
      description: This route is used by administrators to update administrative notes associated with a specific customer. Administrative notes can contain remarks, observations or other relevant information about the customer, and can be updated via a PATCH request by providing the new notes in the body of the request.
      operationId: add notes about the order or the client
      parameters:
        - name: clientId
          in: path
          description: id that needs to be added
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotesAdmin'
      responses:
        '200':
          description: Successful added notes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotesAdminResponse"
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L'utilisateur n'existe pas.
      security:
        - api_key: []
  /auth/register:
    post:
      tags:
        - auth
      summary: Create a customer account.
      description: This route enables a user to create a new customer account by providing the necessary information such as e-mail address, password, etc. Once the account has been successfully created, the user can use their credentials to log in and access the application's features.
      operationId: createClient
      requestBody:
        description: Created client object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegister'
      responses:
        '201':
          description: successful account creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Compte utilisateur créé avec succès.
        '400':
          description: Email address already in use
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Adresse email déjà utilisée 🤨
  /auth/login:
    post:
      tags:
        - auth
      summary: User authentication
      description: This route is used to authenticate a user by checking the credentials provided, such as email address and password. If the information is valid, an authentication token is generated and sent back to the user, allowing them to access the application's protected resources.
      operationId: loginClient
      requestBody:
        description: Logged client object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
      responses:
        '200':
          description: successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token for the user
                  isAdmin:
                    type: boolean
                    description: Indicates whether the user is an admin or not
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Identifiants non valides.
        '400':
          description: Email address not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Adresse e-mail non vérifiée. Veuillez vérifier votre boîte de réception pour le lien de vérification.
  /auth/request-password-reset:
    post:
      tags:
        - auth
      summary: Request password reset
      description: When a user forgets their password, they can use this route to request a password reset. A reset email containing a secure link with a unique token is sent to the user. This token is used to validate the reset request and allow the user to choose a new password.
      operationId: resetPasswordClient
      requestBody:
        description: Logged client object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequestPassword'
      responses:
        '200':
          description: successful authentication
        '404':
          description: The ressource does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L'utilisateur n'existe pas.
  /auth/verify-email:
    post:
      tags:
        - auth
      summary: Check e-mail
      description: After registration, this route is used to verify the e-mail address provided by the user. A confirmation e-mail is sent to the address provided, containing a secure link to activate the account. The user must click on this link to confirm their e-mail address and activate their account.
      operationId: confirm client email before registration
      requestBody:
        description: confirm registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthVerifyEmail'
      responses:
        '200':
          description: successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: john@example.com.
        '400':
          description: The verification link is invalid or expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le lien de vérification est invalide ou a expiré.
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset password
      description: Once the user has requested a password reset and received a reset token via a secure email, they can use this route to provide the token and set a new password. This action completes the password reset process and allows the user to log in with their new credentials.
      operationId: reset password
      requestBody:
        description: reinit password after forgetting it
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthResetPassword'
      responses:
        '200':
          description: successful authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: john@example.com
        '400':
          description: The password reset link is invalid or expired.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le lien de réinitialisation du mot de passe n'est pas valide ou a expiré.
  /auth/verify-token/client:
    get:
      tags:
        - auth
      summary: Verify token
      description: This route makes it possible to verify the client's token for interaction with another API in particular.
      operationId: verify client token
      responses:
        '200':
          description: token is valid
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
      security:
        - api_key: []
  /auth/verify-token/admin:
    get:
      tags:
        - auth
      summary: Verify token
      description: This route makes it possible to verify the admin's token for interaction with another API in particular.
      operationId: verify admin token
      responses:
        '200':
          description: token is valid
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /orders:
    post:
      tags:
        - order
      summary: Create an order
      description: This route is used by a customer to create a new order after making a purchase on the site. The details of the order, such as the products purchased, quantities, delivery addresses, etc., are provided in the body of the POST request.
      operationId: placeOrder00
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirstOrder'
      responses:
        '201':
          description: successful posting order pending (before payment confirmation)
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderNumber:
                    type: string
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
      security:
        - api_key: []
    patch:
      tags:
        - order
      summary: Payment confirmation
      description: Route reserved for customers.This route allows you to confirm the order.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId: 
                  type: string
                orderNumber:
                  type: string
                rememberMe:
                  type: boolean
                email:
                  type: string
                shippingAddress:
                  type: object
                  properties:
                    firstName:
                      type: string
                    lastName: 
                      type: string
                    street: 
                      type: string
                    apartment: 
                      type: string
                    city:
                      type: string
                    postalCode: 
                      type: string
                    country: 
                      type: string
                    email: 
                      type: string
                    phone: 
                      type: string
                billingingAddress:
                  type: object
                  properties:
                    companyName:
                      type: string
                    firstName:
                      type: string
                    lastName: 
                      type: string
                    street: 
                      type: string
                    apartment: 
                      type: string
                    city:
                      type: string
                    postalCode: 
                      type: string
                    country: 
                      type: string
                    email: 
                      type: string
                    phone: 
                      type: string
      responses:
        '200':
          description: successful order confirmation
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
      security:
        - api_key: []
  /orders{orderIds}:
    get:
      tags:
        - order
      parameters:
        - name: orderIds
          in: path
          description: JSON array representing ids of orders
          required: true
          style: simple
          explode: true
          schema:
            type: array
            items:
              type: string

      summary: Get orders by ID
      description: Route reserved for administrators.This route retrieves details of multiple orders based on order identifiers (orderIds) supplied as request parameters. Information about each order, such as products purchased, delivery status, delivery addresses, etc., is returned in the response.
      responses:
        '200':
          description: successful getting all orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /orders/{orderId}:
    patch:
      tags:
        - order
      summary: Modifying an order
      description: Route reserved for administrators.This route is used to modify the processing step for a specific order identified by its unique identifier (orderId). Changes may include the allocation of a processing step as well as other relevant details relating to the order.
      operationId: editOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Successful updated order
          content:
            application/json:
              schema:
                type: object
                properties:
                  lastSentDateToClient:
                    type: string
                    example: 2024-10-09
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /orders/{orderId}/trackingnumber_client:
    post:
      tags:
        - order
      summary: Create customer tracking number
      description: This route enables the customer to create a parcel tracking number for their specific order identified by its unique identifier (orderId), particularly in the event of goods being returned. The parcel tracking number is provided in the body of the POST request.
      operationId: The client creates his tracking number
      parameters:
        - name: orderId
          in: path
          description: ID of the order
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackingNumberClient'
      responses:
        '201':
          description: Successful creation tracking number
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La commande n'existe pas.
      security:
        - api_key: []
  /orders/{orderId}/trackingnumber_client/{trackingNumberId} :
    delete:
      tags:
        - order
      summary: Delete a customer tracking number
      description: This route is used to delete a specific tracking number associated with a given order, identified by its unique identifier (orderId) and the tracking number identifier (trackingNumberId) supplied as a parameter to the DELETE request.
      operationId: The client deletes his tracking number
      parameters:
        - name: orderId
          in: path
          description: ID of the order
          required: true
          schema:
            type: string
        - name: trackingNumberId
          in: path
          description: ID of the tracking number
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful deleted tracking number
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La commande n'existe pas.
      security:
        - api_key: []
  /orders/order-amount:
    get:
      tags:
        - order
      summary: Get cart amount
      description: Route reserved for customers.This route allows you to calculate the basket amount and adjust according to the benefits applied such as the promo code, gift card and credit.
      parameters:
        - name: clientId
          in: query
          description: The customer ID is used to verify that the user is indeed a registered customer.
          required: true
          schema:
            type: string
        - name: advantages
          in: query
          description: The 3 types of advantages have passed.
          schema:
            type: string
            example: { advantages: {
                        codePromo: { isValid: false, percentage: "", code: "" },
                        giftcard: { isValid: false, amount: "", code: "" },
                        credit: { isValid: false, creditId: "", amount: "" },
                      },}
      responses:
        '200':
          description: successful getting cart amount
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalAmount:
                    type: number
                    example: 325.9
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
      security:
        - api_key: []
  /orders/create-payment-intent:
    post:
      tags:
        - order
      summary: Payment
      description: Route reserved for customers.This route allows you to place your order by paying via your bank card using an online payment platform.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId: 
                  type: string
                email:
                  type: string
                advantages:
                  type: object
                  properties:
                    codePromo:
                      type: object
                      properties:
                        isValid: 
                          type: boolean
                        code:
                          type: string
                    giftcard:
                      type: object
                      properties:
                        isValid: 
                          type: boolean
                        code:
                          type: string
                    credit:
                      type: object
                      properties:
                        isValid: 
                          type: boolean
                        creditId:
                          type: string
      responses:
        '200':
          description: successful getting cart amount
          content:
            application/json:
              schema:
                type: object
                properties:
                  clientSecret:
                    type: string
                    example: "pi_3MtwBwLkdIwHu7ix28a3tqPa_secret_YrKJUKribcBjcG8HVhfZluoGH"
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
      security:
        - api_key: []
  /orderProducts{orderProductsIds}:
    get:
      tags:
        - orderProducts
      parameters:
        - name: orderProductsIds
          in: path
          description: JSON array representing ids of orderProducts
          required: true
          style: simple
          explode: true
          schema:
            type: array
            items:
              type: string

      summary: Get products by ID
      description: This route retrieves the details of several products in an order based on the product identifiers (orderProductsIds) supplied as query parameters. Information about each product, such as its name, quantity, price, etc., is returned in the response.
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProducts'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /orderProducts/{orderProductsId}/note:
    patch:
      tags:
        - orderProducts
      summary: Add product note
      description: This route is used by administrators to add a specific note to a given product as part of an order. The note can contain additional information or remarks about the product. The product identifier (orderProductsId) and the contents of the note are provided in the body of the PATCH request.
      operationId: editNoteOrderProducts
      parameters:
        - name: orderProductsId
          in: path
          description: ID of orderProducts that needs to be edited
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful edit orderProducts 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderProducts'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: orderProducts n'existe pas.
      security:
        - api_key: []
  /products:
    get:
      tags:
        - product
      summary: Get all products
      description: This route retrieves a list of all the products available in the catalogue. Information about each product, such as its name, description, price, etc., is returned in the response.
      responses:
        '200':
          description: successful getting all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'
    post:
      tags:
        - product
      summary: Create a product
      description: This route is used by administrators to add a new product to the catalogue. The details of the product, such as its name, description, price, etc., are provided in the body of the POST request.
      operationId: placeOrderProductsId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: successful posting product
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /products/{productsId}:
    get:
      tags:
        - product
      summary: Get a product by ID
      description: This route retrieves details of a specific product based on its unique identifier (productsId). Information about the product, such as its name, description, price, etc., is returned in the response.
      operationId: getProductById
      parameters:
        - name: productsId
          in: path
          description: ID of products that needs to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCreateResponse'
        '404':
          description: The product does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le produit n'existe pas.
    patch:
      tags:
        - product
      summary: Modifying a product
      description: This route is used by administrators to modify the details of a specific product identified by its unique identifier (productsId). The fields to be updated, such as name, description, price, etc., are provided in the body of the PATCH request.
      operationId: editProduct
      parameters:
        - name: productsId
          in: path
          description: ID of product that needs to be fetched
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Successful updated product
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/ProductCreateResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The product does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le produit n'existe pas.
      security:
        - api_key: []
    delete:
      tags:
        - product
      summary: Delete product
      description: This route is used by administrators to remove a specific product from the catalogue based on its unique identifier (productsId).
      operationId: deleteProduct
      parameters:
        - name: productsId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful deleted product
          content:
            application/json:
              schema:
                type: object
                properties:
                  productId:
                    type: string
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le produit n'existe pas.
      security:
        - api_key: []
  /credits:
    get:
      tags:
        - credit
      parameters:
      - name: orderProductsIds
        in: query
        description: JSON array representing ids of orderProducts
        required: true
        explode: true
        schema:
            type: array
            items:
              type: string
      summary: Get all assets
      description: This route, reserved for administrators, is used to retrieve a list of all the credit notes issued to customers. Information about each credit note, such as its value, expiry date, code, etc., is returned in the response.
      responses:
        '200':
          description: successful getting all credits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credits'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /credits/{orderProductsId}:
    patch:
      tags:
        - credit
      summary: Archiving a used credit note
      description: This route is automatically called up when a user uses their credit to make a purchase. When their credit note is used, it is automatically marked as used and archived. The order product identifier (orderProductsId) associated with the credit note is supplied in the body of the PATCH request to perform this operation.
      parameters:
        - name: orderProductsId
          in: path
          description: id that needs to be archived
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCredit'
      responses:
        '200':
          description: Successful updated credit
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/CreditUpdated'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le crédit n'existe pas.
      security:
        - api_key: []
  /credits/verify-code:
    get:
      tags:
        - credit
      summary: Check the code
      description: This route checks one credit code. In addition, we also ensure that the credit is indeed that belonging to the customer. The API returns the credit amount.
      parameters:
        - name: creditId
          in: query
          description: credit id mongoDB
          required: true
          schema:
            type: string
            example: 65f9e3161cb6b68d08b89893
        - name: clientId
          in: query
          description: client id mongoDB
          required: true
          schema:
            type: string
            example: 65bc8c5b7f890edc1f63182f
      responses:
        '200':
          description: successful checking
          content:
            application/json:
              schema:
                type : object
                properties:
                  amount:
                    type: number
                    example: 20.5
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: L'avoir n'existe pas.
  /materials:
    get:
      tags:
        - material
      summary: Get all materials
      description: This route retrieves a list of all available materials. Information about each material, such as its name and color, is returned in the response.
      responses:
        '200':
          description: successful getting all materials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Material'
    post:
      tags:
        - material
      summary: Create a material
      description: This route, reserved for administrators, allows adding a new material to the list of available materials. Details of the material, such as its name and color, are provided in the POST request body.
      operationId: placeMaterialById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialCreate'
      responses:
        '201':
          description: successful posting material
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/MaterialCreateResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
  /materials/{materialId}:
    patch:
      tags:
        - material
      summary: Update a material
      description: This route, reserved for administrators, is used to modify the details of a specific material identified by its unique identifier (materialId). Fields to be updated, such as the material's name and color, are provided in the PATCH request body.
      operationId: updateMaterial
      parameters:
        - name: materialId
          in: path
          description: ID of the material that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaterialEdit'
      responses:
        '200':
          description: successful updated material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialCreateResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le matériau n'existe pas.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
    delete:
      tags:
        - material
      summary: Delete a material
      description: This route, reserved for administrators, allows deleting a specific material from the list of available materials based on its unique identifier (materialId).
      operationId: deleteMaterial
      parameters:
        - name: materialId
          in: path
          description: ID of the material that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful deleted material
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaterialCreateResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le matériau n'existe pas.
      security:
        - api_key: []
  /promocodes:
    get:
      tags:
        - promocode
      summary: Get all promotional codes
      description: This route, reserved for administrators, retrieves a list of all promotional codes. Information about each promotional code, such as its discount percentage, expiration date, and code, is returned in the response.
      responses:
        '200':
          description: successful getting all promocodes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Promocode'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
    post:
      tags:
        - promocode
      summary: Create a promotional code 
      description: This route, reserved for administrators, allows adding a new promotional code. Details of the promotional code, such as its discount percentage, expiration date, and code, are provided in the POST request body.
      operationId: placePromocodeById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromocodeCreate'
      responses:
        '201':
          description: successful posting promocode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromocodeCreateResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /promocodes/{promocodeId}:
    delete:
      tags:
        - promocode
      summary: Delete a promocode 
      description: This route, reserved for administrators, allows deleting a specific promotional code. The promotional code to be deleted is identified by its unique code.
      operationId: deletePromocode
      parameters:
        - name: promocodeId
          in: path
          description: ID of the promocode that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful deleted promocode
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromocodeDeleteResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le code promo n'existe pas.
      security:
        - api_key: []
  /promocodes/verify-code:
    get:
      tags:
        - promocode
      summary: Check the code
      description: This route checks one promotional code. If the code is verified then the reduction on the total price of the cart applies with the percentage returned by the API.
      parameters:
        - name: code
          in: query
          description: promocode code
          required: true
          schema:
            type: string
            example: Bonjour-15
      responses:
        '200':
          description: successful checking
          content:
            application/json:
              schema:
                type : object
                properties:
                  percentage:
                    type: number
                    example: 15
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le code promo n'existe pas.
      security:
        - api_key: []
  /giftcards:
    get:
      tags:
        - giftcard
      summary: Get all gift cards"
      description: This route retrieves a list of all gift cards available. Information about each gift card, such as its value, expiration date, and status, is returned in the response.
      responses:
        '200':
          description: successful getting all giftCards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCard'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []

    post:
      tags:
        - giftcard
      summary: Create a giftcard 
      description: This route is used to create a new gift card when a customer purchases one. The details of the gift card, such as its value and expiration date, are provided in the POST request body. 
      operationId: placeGiftCardsById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCardCreate'
      responses:
        '201':
          description: successful posting giftCard
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/GiftCard'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
      security:
        - api_key: []
    patch:
      tags:
        - giftcard
      summary: Update a gift card 
      description: This route is automatically called when a customer uses a gift card. The gift card's status is updated to reflect its usage. The gift card and the user who is using it are identified in the PATCH request body.
      operationId: archiveGiftcardById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GiftCardUsed'
      responses:
        '200':
          description: Successful archiving giftcard
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/GiftCardUsedResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La carte-cadeau n'existe pas.
      security:
        - api_key: []
  /giftcards/verify-code:
    get:
      tags:
        - giftcard
      summary: Check the code
      description: This route checks one giftcard code. If the code is verified then the reduction on the total price of the cart applies with the amount returned by the API.
      parameters:
        - name: code
          in: query
          description: giftcard code
          required: true
          schema:
            type: string
            example: 4hj0AfFyT7mIdO4
      responses:
        '200':
          description: successful checking
          content:
            application/json:
              schema:
                type : object
                properties:
                  amount:
                    type: number
                    example: 50
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La carte cadeau n'existe pas.
      security:
        - api_key: []
  /statistics/{year}:
    get:
      tags:
        - statistic
      summary: Get statistics by year
      description: This route, reserved for administrators, retrieves statistics related to orders, products, exchanges, refunds, credits, and other relevant data for a specific year. The year parameter allows filtering the statistics by year.
      operationId: getStatistics
      parameters:
        - name: year
          in: path
          description: year concerned
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful getting all statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
      security:
        - api_key: []
  /collections:
    get:
      tags:
        - collection
      summary: Get all collections
      description: This route retrieves a list of all collections. Collections are groupings of products. Information about each collection, such as its name and the products it contains, is returned in the response.
      responses:
        '200':
          description: successful getting all collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
    post:
      tags:
        - collection
      summary: Create a collection 
      description: This route, reserved for administrators, allows adding a new collection. Details of the collection, such as its name and the products it contains, are provided in the POST request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreate'
      responses:
        '201':
          description: successful posting collection
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Collection'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
  /collections/{collectionId}:
    put:
      tags:
        - collection
      summary: Update a collection
      description: This route, reserved for administrators, allows updating an existing collection. Details of the collection to be updated, such as its name and the products it contains, are provided in the PUT request body.
      operationId: updateCollection
      parameters:
        - name: collectionId
          in: path
          description: ID of the collection that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionEdit'
      responses:
        '200':
          description: Successful updated collection
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Collection'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La collection n'existe pas.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
    delete:
      tags:
        - collection
      summary: Delete collection
      description: This route, reserved for administrators, allows deleting a specific collection.
      operationId: deleteCollection
      parameters:
        - name: collectionId
          in: path
          description: ID of the collection that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Alert message before deleting
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: object
                    properties:
                      alert:
                        type: string
                        example: Une catégorie est liée à cette collection.
                      collectionId:
                        type: string
                      categoriesName:
                        type: array
                        items:
                          type: string
                          example: soirée,détente
                      productsName:
                        type: array
                        items:
                          type: string
                          example: Bracelet ancien, Ceinture vintage
    
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La collection n'existe pas.
      security:
        - api_key: []
  /categories:
    get:
      tags:
        - category
      summary: Get all categories
      description: This route retrieves a list of all categories. Categories are associated with a collection and group similar types of products. Information about each category, such as its name and the products it contains, is returned in the response.
      responses:
        '200':
          description: successful getting all categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    post:
      tags:
        - category
      summary: Create a category 
      description: This route, reserved for administrators, allows adding a new category. Details of the category, such as its name, the collection it belongs to, and the products it contains, are provided in the POST request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: successful posting category
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
  /categories/{categoryId}:
    patch:
      tags:
        - category
      summary: Update a category
      description: This route, reserved for administrators, allows updating an existing category. Details of the category to be updated, such as its name, the collection it belongs to, and the products it contains, are provided in the PATCH request body
      operationId: updateCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the category that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryEdit'
      responses:
        '200':
          description: Successful updated category
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La catégorie n'existe pas.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
    delete:
      tags:
        - category
      summary: Delete a category
      description: This route, reserved for administrators, allows deleting a specific category
      operationId: deleteCategory
      parameters:
        - name: categoryId
          in: path
          description: ID of the category that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful deleted category
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: La catégorie n'existe pas.
      security:
        - api_key: []
  /tags:
    get:
      tags:
        - tag
      summary: Get all tags
      description: This route retrieves a list of all tags. Tags allow associating products based on common criteria. Information about each tag, such as its name and the products it is associated with, is returned in the response.
      responses:
        '200':
          description: successful getting all tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    post:
      tags:
        - tag
      summary: Create a tag 
      description: This route, reserved for administrators, allows adding a new tag. Details of the tag, such as its name and the products it is associated with, are provided in the POST request body.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '201':
          description: successful posting tag
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
  /tags/{tagId}:
    put:
      tags:
        - tag
      summary: Update a tag
      description: This route, reserved for administrators, allows updating an existing tag. Details of the tag to be updated, such as its name and the products it is associated with, are provided in the PUT request body.
      operationId: updateTag
      parameters:
        - name: tagId
          in: path
          description: ID of the tag that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreate'
      responses:
        '200':
          description: Successful updated tag
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le tag n'existe pas.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Déjà enregistré, veuillez modifier 🔀
      security:
        - api_key: []
    delete:
      tags:
        - tag
      summary: Delete a tag
      description: This route, reserved for administrators, allows deleting a specific tag.
      operationId: deleteTag
      parameters:
        - name: tagId
          in: path
          description: ID of the tag that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful deleted tag
          content:
           application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token d'authentification manquant ou invalide.
        '403':
          description: Unauthorized - Admin is not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Accès refusé. Vous n'êtes pas un administrateur.
        '404':
          description: The ressource does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Le tag n'existe pas.
      security:
        - api_key: []
components:
  schemas:
    Clients:
      type: array
      items:
        $ref: '#/components/schemas/ClientDetails'
      xml:
        name: clients
    ClientDetails:
      type: object
      properties:
        id:
          type: string
          example: 5fc4d22b45a0fb3fd4a75f65
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john@example.com
        phone:
          type: string
          example: 06 90 12 34 56
        avatar:
          type: string
        role:
          type: string
          example: user
        shippingAddress:
          type: object
          properties:
            firstName:
              type: string
            lastName: 
              type: string
            street: 
              type: string
            apartment: 
              type: string
            city:
              type: string
            postalCode: 
              type: string
            country: 
              type: string
            email: 
              type: string
            phone: 
              type: string
        billingingAddress:
          type: object
          properties:
            companyName:
              type: string
            firstName:
              type: string
            lastName: 
              type: string
            street: 
              type: string
            apartment: 
              type: string
            city:
              type: string
            postalCode: 
              type: string
            country: 
              type: string
            email: 
              type: string
            phone: 
              type: string
        totalOrders:
          type: integer
          format: int16
          example: 3
        wishlist:
          type: array
          items:
            type: object
            properties:
              productsId:
                type: string
                example: 6vc4d22b45a0fb3fd4a75f33
              material:
                type: integer
                format: int8
                example: 1
        cart:
          type: array
          items:
            type: object
            properties:
              productsId:
                type: string
                example: 1jc4d22b45a0fb3fd4a75f50
              material:
                type: integer
                format: int8
                example: 3
        rememberMe:
          type: boolean
        Orders:
          type: array
          items:
            type: string
          example:
            - 2884d22b45a0fb3fd4a75p2
            - 7774d22b45a0fb3fd4a7bn0
            - 10m4d22b45a0fb3fd4a7l53
    EditClient:
      type: object
      properties:
        id:
          type: string
          example: 5fc4d22b45a0fb3fd4a75f65
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: john@example.com
        phone:
          type: string
          example: 06 90 12 34 56
        shippingAddress:
          type: object
          properties:
            street: 
              type: string
            apartment: 
              type: string
            city:
              type: string
            postalCode: 
              type: string
        totalOrders:
          type: integer
          format: int16
          example: 3
        wishlist:
          type: array
          items:
            type: object
            properties:
              productsId:
                type: string
                example: 6vc4d22b45a0fb3fd4a75f33
              material:
                type: integer
                format: int8
                example: 1
        cart:
          type: array
          items:
            type: object
            properties:
              productsId:
                type: string
                example: 1jc4d22b45a0fb3fd4a75f50
              material:
                type: integer
                format: int8
                example: 3
        orders:
          type: array
          items:
            type: string
          example:
            - 2884d22b45a0fb3fd4a75p2
            - 7774d22b45a0fb3fd4a7bn0
            - 10m4d22b45a0fb3fd4a7l53
    NotesAdmin:
      type: object
      properties:
        content:
          type: string
          example: Echange cordial avec le client
    NotesAdminResponse:
      type: object
      properties:
       _id: 
        type: string
       content:
          type: string
          example: Echange cordial avec le client
       clientId:
        type: string
        example: 65bc8c5b7f890edc1f63182f
       date:
        type: string
       type: 
        type: string
        example: addingNote
    TrackingNumberClient:
      type: object
      required:
            - trackingNumber
      properties:
        trackingNumber:
          type: object
          required:
            - id
            - isAdmin
            - value
            - date
          properties:
            id: 
              type: string
              example: 634b8479-1e1f-42a6-835a-26f6bc8e8337
            isAdmin:
              type: boolean
              example: false
            value:
              type: string
              example: UIOP908_njUI
            date:
              type: string
              example: 2024-03-24
    Order:
      type: object
      properties:
        statusPayment:
          type: string
          example: paid
        orderNumber:
          type: string
          example: 01polKMj7f
        clientId:
          type: string
          example: 65bc8c5b7f890edc1f631830
        _id:
          type: string
        amountPromoCode:
          type: number
          format: int32
          example: 10
        amountGiftcard:
          type: number
          format: int32
          example: 10
        amountCredit:
          type: number
          format: int32
          example: 10
        step:
          type: integer
          format: int32
          example: 2
        trackingNumberList:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              isAdmin:
                type: boolean
              value:
                type: string
              date:
                type: string
                format: date
              orderProducts:
                type: array
                items:
                  type: string
                example:
                  - 2884d22b45a0fb3fd4a75p2
                  - 7774d22b45a0fb3fd4a7bn0
                  - 10m4d22b45a0fb3fd4a7l53
              _id:
                type: string
        shippingAddress:
          type: object
          properties:
            firstName:
              type: string
            lastName: 
              type: string
            street: 
              type: string
            apartment: 
              type: string
            city:
              type: string
            postalCode: 
              type: string
            country: 
              type: string
            email: 
              type: string
            phone: 
              type: string
        billingingAddress:
          type: object
          properties:
            companyName:
              type: string
            firstName:
              type: string
            lastName: 
              type: string
            street: 
              type: string
            apartment: 
              type: string
            city:
              type: string
            postalCode: 
              type: string
            country: 
              type: string
            email: 
              type: string
            phone: 
              type: string
        inTotalAmount:
          type: integer
          example: 250
        outTotalAmount:
          type: integer
        lastSentDateToClient:
          type: string
        orderProducts:
          type: array
          items:
            type: string
            example: 2884d22b45a0fb3fd4a75p2
    Orders:
      type: array
      items:
        $ref: '#/components/schemas/Order'
      xml:
        name: orders
    FirstOrder:
      type: object
      properties:
        clientId:
          type: string
        advantages:
          type: object
          properties:
            codePromo:
              type: object
              properties:
                isValid: 
                  type: boolean
                code:
                  type: string
            giftcard:
              type: object
              properties:
                isValid: 
                  type: boolean
                code:
                  type: string
            credit:
              type: object
              properties:
                isValid: 
                  type: boolean
                creditId:
                  type: string
        shippingAddress:
          type: object
          properties:
            firstName:
              type: string
            lastName: 
              type: string
            street: 
              type: string
            apartment: 
              type: string
            city:
              type: string
            postalCode: 
              type: string
            country: 
              type: string
            email: 
              type: string
            phone: 
              type: string
        billingingAddress:
          type: object
          properties:
            companyName:
              type: string
            firstName:
              type: string
            lastName: 
              type: string
            street: 
              type: string
            apartment: 
              type: string
            city:
              type: string
            postalCode: 
              type: string 
            country: 
              type: string
            email: 
              type: string
            phone: 
              type: string
    OrderProducts:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 2884d22b45a0fb3fd4a75p2
          productsId:
            type: string
            example: 7774d22b45a0fb3fd4a7bn0
          quantity:
            type: integer
            format: int16
            example: 2
          originalPrice:
            type: integer
            format: int16
            example: 100
          finalPrice:
            type: integer
            format: int16
            example: 80
          amountPromotion:
            type: integer
            format: int16
            example: 20
          material:
            type: string
          orderId:
            type: string
            example: 65bc8c5b7f890edc1f631830
          orderProductsActions:
            type: object
            properties:
              exchange:
                type: integer
                format: int16
                example: 1
              exchangDate:
                type: string
                example: 2024-10-03
              refund:
                type: integer
                format: int16
                example: null
              refundDate:
                type: string
              credit:
                type: string
                example: 10m4d22b45a0fb3fd4a7l53
              note:
                type: string
                example: Des notes pour l'exemple
    Product:
      type: object
      properties:
        name:
          type: string
          example: Boucles d'oreilles
        collection:
          type: string
          example: 65fafdf6ab75220625f55db1
        category:
          type: string
          example: 65fafe1eab75220625f55db5
        tags:
          type: array
          items:
            type: string
            example: 65fafea0ab75220625f55dc4
        secondary_images:
          type: array
          items: 
            type: string
            example: bo.png
        main_description:
          type: string
          example: >-
            Magnifiques boucles d'oreilles pour des occasions uniques et qui
            vous mettront en valeur.
        createdAt:
          type: string
          example: "2024-03-21T17:50:38.100Z"
        updatedAt:
          type: string
          example: "2024-03-21T17:50:38.100Z"
        materials:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 65f2d2df4db605d020200620
              pricing:
                type: object
                properties:
                  currentPrice:
                    type: string
                    example: 15
                  oldPrice:
                    type: string
                    example: 30
              promotion:
                type: object
                properties:
                  amount:
                    type: integer
                    format: int16
                    example: 50
                  startDate:
                    type: string
                    example: 2024-04-01T00:00:00.000
                  endDate:
                    type: string
                    example: 2024-05-01T00:00:00.000Z
              main_image:
                type: string
                example: col.png
              untilNew:
                type: string
                example: 2024-04-15T00:00:00.000Z
              stock:
                type: integer
                format: int16
                example: 7
              isActive:
                type: boolean
                example: true
              isArchived:
                type: boolean
                example: false
        isActive:
          type: boolean
        isArchived:
          type: boolean
    ProductCreate:
      type: object
      required:
        - name
        - collection
        - category
      properties:
        name:
          type: string
          example: Boucles d'oreilles
        collection:
          type: string
          example: 65fafdf6ab75220625f55db1
        category:
          type: string
          example: 65fafe1eab75220625f55db5
        tags:
          type: array
          items:
            type: string
            example: 65fafea0ab75220625f55dc4
        secondary_images:
          type: array
          items: 
            type: string
            example: bo.png
        main_description:
          type: string
          example: >-
            Magnifiques boucles d'oreilles pour des occasions uniques et qui
            vous mettront en valeur.
        materials:
          type: array
          items:
            type: object
            required:
              - _id
              - pricing
              - main_image
              - untilNew
              - stock
            properties:
              _id:
                type: string
                example: 65f2d2df4db605d020200620
              pricing:
                type: object
                properties:
                  currentPrice:
                    type: string
                    example: 15
                  oldPrice:
                    type: string
                    example: 30
              promotion:
                type: object
                properties:
                  amount:
                    type: integer
                    format: int16
                    example: 50
                  startDate:
                    type: string
                    example: 2024-04-01T00:00:00.000
                  endDate:
                    type: string
                    example: 2024-05-01T00:00:00.000Z
              main_image:
                type: string
                example: col.png
              untilNew:
                type: string
                example: 2024-04-15T00:00:00.000Z
              stock:
                type: integer
                format: int16
                example: 7
              isArchived:
                type: boolean
                example: false
        isActive:
          type: boolean
    ProductCreateResponse:
      type: object
      properties:
        _id: 
          type: string
        name:
          type: string
          example: Boucles d'oreilles
        collection:
          type: string
          example: 65fafdf6ab75220625f55db1
        category:
          type: string
          example: 65fafe1eab75220625f55db5
        tags:
          type: array
          items:
            type: string
            example: 65fafea0ab75220625f55dc4
        secondary_images:
          type: array
          items: 
            type: string
            example: bo.png
        main_description:
          type: string
          example: >-
            Magnifiques boucles d'oreilles pour des occasions uniques et qui
            vous mettront en valeur.
        materials:
          type: array
          items:
            type: object
            required:
              - _id
              - pricing
              - main_image
              - untilNew
              - stock
            properties:
              _id:
                type: string
                example: 65f2d2df4db605d020200620
              pricing:
                type: object
                properties:
                  currentPrice:
                    type: string
                    example: 15
                  oldPrice:
                    type: string
                    example: 30
              promotion:
                type: object
                properties:
                  amount:
                    type: integer
                    format: int16
                    example: 50
                  startDate:
                    type: string
                    example: 2024-04-01T00:00:00.000
                  endDate:
                    type: string
                    example: 2024-05-01T00:00:00.000Z
              main_image:
                type: string
                example: col.png
              untilNew:
                type: string
                example: 2024-04-15T00:00:00.000Z
              stock:
                type: integer
                format: int16
                example: 7
              isArchived:
                type: boolean
                example: false
        isActive:
          type: boolean
        isArchived:
          type: boolean
          example: false
    Products:
      type: array
      items:
        $ref: '#/components/schemas/Product'
    Credit:
      type: object
      properties:
        _id:
          type: string
          example: 6vbhd22b45a0fb3fd4a7599
        clientId: 
          type: string
          example: 65b50eb0624d950f874b9838
        orderProductsId:
          type: string
          example: 2884d22b45a0fb3fd4a75p2
        amount:
          type: integer
          format: int16
          example: 7
        code:
          type: string
          example: 1156JHUfJNBdfdf
        dateExpire:
          type: string
          example: 2023-04-05 09:55
        isArchived:
          type: boolean
          example: false
    CreditUpdated:
      type: object
      properties:
        _id:
          type: string
          example: 6vbhd22b45a0fb3fd4a7599
        clientId: 
          type: string
          example: 65b50eb0624d950f874b9838
        orderProductsId:
          type: string
          example: 2884d22b45a0fb3fd4a75p2
        amount:
          type: integer
          format: int16
          example: 7
        code:
          type: string
          example: 1156JHUfJNBdfdf
        dateExpire:
          type: string
          example: 2023-04-05 09:55
        isArchived:
          type: boolean
          example: true
    Credits:
      type: array
      items:
        $ref: '#/components/schemas/Credit'
    EditCredit:
      type: object
      required:
        - isArchived
      properties:
        isArchived:
          type: boolean
          example: true
    Material:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 2884d22b45a0fb3fd4a75p2
          name:
            type: string
            example: Or blanc
          value:
            type: string
            example: "#FFFFFF"
          isArchived:
            type: boolean
            example: false
    MaterialCreate:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          example: Or rose
        value:
          type: string
          example: "#F0F0F0"
    MaterialEdit:
      type: object
      properties:
        name:
          type: string
          example: Or rose
    MaterialCreateResponse:
      type: object
      properties:
        _id:
          type: string
          example: 2884d22b45a0fb3fd4a75p2
        name:
          type: string
          example: Or rose
        value:
          type: string
          example: "#F0F0F0"
    Tag:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 2884d22b45a0fb3fd4a75p2
          name:
            type: string
            example: Elégance
    TagCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Fantaisie
    Collection:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 2884d22b45a0fb3fd4a75p2
          name:
            type: string
            example: Pour un jour unique
          main_image:
            type: string
          isArchived:
            type: boolean
            example: false
    CollectionCreate:
      type: object
      required:
        - name
        - main_image
      properties:
        name:
          type: string
          example: Pour le quotidien
        main_image:
          type: string
    CollectionEdit:
      type: object
      properties:
        main_image:
          type: string
    Category:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 2884d22b45a0fb3fd4a75p2
          name:
            type: string
            example: Accessoire cheveux
          parentCollection:
            type: array
            items: 
              type: string
              example: 
                - "65f2d2b24db605d02020061c"
                - "65f2d2b24db605d02020061d"
          isArchived:
            type: boolean
            example: false
    CategoryCreate:
      type: object
      required:
        - name
        - parentCollection
      properties:
        name:
          type: string
          example: Bijoux
        parentCollection:
          type: array
          items: 
            type: string
            example: 65f2d2b24db605d02020061c
    CategoryEdit:
      type: object
      properties:
        name:
          type: string
          example: Sport
    Promocode:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 65f2d2df4db605d020200620
          code:
            type: string
            example: Bonjour-10
          percentage:
            type: integer
            format: int16
            example: 10
          dateExpire: 
            type: string
            example: 2024-12-10
          createdAt:
            type: string
            example: 2024-03-15T11:59:26.905+00:00
          updatedAt:
            type: string
            example: 2024-03-15T11:59:26.905+00:00
    PromocodeCreate:
      type: object
      required:
        - code
        - name
        - value
      properties:
        code:
          type: string
          example: Bonjour-10
        name:
          type: string
          example: Or rose
        value:
          type: string
          example: "#F0F0F0"
    PromocodeCreateResponse:
      type: object
      properties:
        _id: 
          type: string
        code:
          type: string
          example: Bonjour-10
        name:
          type: string
          example: Or rose
        value:
          type: string
          example: "#F0F0F0"
    PromocodeDeleteResponse:
      type: object
      properties:
        promocodeId:
          type: string
    GiftCard:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 65f2d2b24db605d02020061c
          buyerId:
            type: string
            example: 65b50eb0624d950f874b983a
          amount:
            type: number
            format: int16
            example: 50
          dateExpire: 
            type: string
            example: 2025-12-18
          code:
            type: string
            example: ut984bsl_+opj12
          consumerId: 
            type: string
            example: null
          createdAt:
            type: string
            example: 2024-03-15T11:59:26.905+00:00
          updatedAt:
            type: string
            example: 2024-03-15T11:59:26.905+00:00
    GiftCardCreate:
      type: object
      required:
        - buyerId
        - amount
      properties:
        buyerId:
          type: string
          example: 64f2d2df4db605d0202b0acd
        amount:
          type: number
          format: int16
          example: 50
    GiftCardUsed:
      type: object
      required:
        - giftcardId
        - consumerId
      properties:
        giftcardId:
          type: string
          example: 65f2d2b24db605d02020061c
        consumerId:
          type: string
          example: 61f2d2df4db605d0202b0af5 
    GiftCardUsedResponse:
      type: array
      items:
        type: object
        properties:
          _id:
            type: string
            example: 65f2d2b24db605d02020061c
          buyerId:
            type: string
            example: 65b50eb0624d950f874b983a
          amount:
            type: number
            format: int16
            example: 50
          dateExpire: 
            type: string
            example: 2025-12-18
          code:
            type: string
            example: ut984bsl_+opj12
          consumerId: 
            type: string
            example: 61f2d2df4db605d0202b0af5
          createdAt:
            type: string
            example: 2024-03-15T11:59:26.905+00:00
          updatedAt:
            type: string
            example: 2024-03-15T11:59:26.905+00:00
    Statistics:
      type: object
      properties:
        ordersCount:
          type: integer
          format: int16
          example: 1
        totalOrderAmount:
          type: integer
          format: int16
          example: 80
        ordersCanceled:
          type: integer
          format: int16
          example: 0
        totalOrdersCanceledAmount:
          type: integer
          format: int16
          example: 1
        currentMonthOrdersCount:
          type: integer
          format: int16
          example: 1
        averageByOrder:
          type: integer
          format: int16
          example: 45.55
        topSellingProducts:
          type: array
          items: 
            type: object
            properties:
              productName:
               type: string
               example: Bracelet élégant
              materialName:
                type: string
                example: GOLD FILLED
              totalQuantity:
                type: integer
                format: int16
                example: 2
              productId:
                type: string
                example: 65fc736e7ad361077560d259
        topCartProducts:
          type: array
          items: 
            type: object
            properties:
              productName:
               type: string
               example: Bracelet élégant
              materialName:
                type: string
                example: GOLD FILLED
              materialId:
                type : string
                example: 65f2d2df4db605d020200620
              totalQuantity:
                type: integer
                format: int16
                example: 2
              productId:
                type: string
                example: 65fc736e7ad361077560d259
        totalCredits:
          type: object
          properties:
            count:
              type: integer
              format: int16
              example: 2
            totalAmount:
              type: integer
              format: int16
              example: 7
        usedCredits:
          type: object
          properties:
            count:
              type: integer
              format: int16
              example: 4
            totalAmount:
              type: integer
              format: int16
              example: 25
        usedCreditDetails:
          type: array
          items:
            type: object
            properties:
              amount:
                type: integer
                format: int16
                example: 6
              firstName:
                type: string
                example: William
              lastName:
                type: string
                example: Eva
              usedAt:
                type: string
                example: 2024-03-19T19:15:01.672Z
        activeCredits:
          type: object
          properties:
            count:
              type: integer
              format: int16
              example: 6
            totalAmount:
              type: integer
              format: int16
              example: 16
        activeCreditDetails:
          type: array
          items: 
            type: object
            properties:
              amount:
                type: integer
                format: int16
                example: 2
              firstName:
                type: string
                example: Alice
              lastName:
                type: string
                example: Smith
        totalExchanges:
          type: integer
          format: int16
          example: 12
        exchangeDetails:
          type: array
          items:
            type: object
            properties:
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: Doe
              exchangeDate:
                type: string
                example: 2024-03-19T19:15:01.672Z
              productName:
                type: string
                example: Bracelet smart
              exchangedQuantity:
                type: integer
                format: int16
                example: 3
        totalGiftcards:
          type: integer
          format: int16
          example: 4
        totalAmountGiftcards:
          type: integer
          format: int16
          example: 311
        validGiftcards:
          type: integer
          format: int16
          example: 23
        totalAmountValidGiftcards:
          type: integer
          format: int16
          example: 170
        validGiftcardsDetails:
          type: array
          items:
            type: object
            properties:
              amount:
                type: integer
                format: int16
                example: 4
              createdAt:
                type: string
                example: 2024-03-19T19:15:01.672Z
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: Doe
        usedGiftcards:
          type: integer
          format: int16
          example: 2
        totalAmountUsedGiftcards:
          type: integer
          format: int16
          example: 141
        usedGiftcardsDetails:
          type: array
          items:
            type: object
            properties:
              amount:
                type: integer
                format: int16
                example: 10.5
              updatedAt:
                type: string
                example: 2024-03-19T19:15:01.672Z
              firstName:
                type: string
                example: John
              lastName:
                type: string
                example: Doe
        refundDetails:
          type: array
          items:
            type: object
            properties:
              firstName:
                type: string
                example: Bob
              lastName:
                type: string
                example: Johnson
              productName:
                type: string
                example: Broche florale
              materialName:
                type: string
                example: ARGENT MASSIF
              refundAmount:
                type: integer
                format: int16
                example: 25
              refundDate:
                type: string
                example: 2024-03-19T19:15:01.672Z
        totalRefundAmount:
          type: integer
          format: int16
          example: 30
        totalRefunds:
          type: integer
          format: int16
          example: 2
    AuthLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    AuthRegister:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    AuthRequestPassword:
      type: object
      required:
      - email
      properties:
        email:
          type: string
          example: john@email.com
    AuthResetPassword:
      type: object
      required:
      - email
      - token
      properties:
        email:
          type: string
          example: john@email.com
        token:
          type: string
    AuthVerifyEmail:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          example: john@email.com
  securitySchemes:
    jwt_auth:
      type: apiKey
      in: header
      name: Authorization
      description: JWT authorization header using the Bearer scheme.
    api_key:
      type: apiKey
      name: api_key
      in: header
